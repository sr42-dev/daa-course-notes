general :

- T(n) = Cop * C(n); time taken = exec time per op * number of ops
- 1 < log n < n < n log n < n^2 < n^3 < 2^n < n!

order of growth :

- change in algorithm parameters with change in input size
- only higher order terms considered

- to find the function with a higher order of growth :

	- try to multiply one by a factor to get the other
	- the unchanged function has higher order of growth

types of time efficiency :

- best case
- worst case
- average case (average over all possible inputs)

asymptotic complexity notations :

- big oh notation
- big omega notation
- big theta notation





