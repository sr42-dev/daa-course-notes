general :

- algorithm for computing GCD

	- Euclidean Algorithm for finding GCD(A,B) is as follows:

    		- If A = 0 then GCD(A,B)=B, since the GCD(0,B)=B, and we can stop.  
    		- If B = 0 then GCD(A,B)=A, since the GCD(A,0)=A, and we can stop.  
    		- Write A in quotient remainder form (A = Bâ‹…Q + R)
    		- Find GCD(B,R) recursively -> GCD(A,B) = GCD(B,R)

	- Euclidean algorithm is most efficient 
		
	- checking consecutive integers & prime-factorization also works

- To make an algorithm :
	
	- design
	- express by natural language, pseudocode or flowchart
	- prove correctness mathematically
	- prove correctness by implementation
	- theoreticaly analyze
	- emperically measure
	- optimize & repeat

Efficiency analysis :

- need of analysis :
	
	- resource consumption (CPU & memory)
	- comparison of different algorithms before implementation

- time complexity (more critical) : amount of time taken for execution as function of input
	
	- exponential : n!, a^n
	- logarithmic : logn
	- linear : n
	- quadratic : n^2
	- constant : a
	
- space complexity : amount of memory taken by the implementation